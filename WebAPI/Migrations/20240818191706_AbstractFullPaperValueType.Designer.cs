// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Models;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(SqlServerApplicationDbContext))]
    [Migration("20240818191706_AbstractFullPaperValueType")]
    partial class AbstractFullPaperValueType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Models.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConferenceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Hotel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastDateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaperSubmissionEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaperSubmissionStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)");

                    b.HasKey("Id");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("WebAPI.Models.GuestLecturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdConference")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdConference");

                    b.HasIndex("IdUser");

                    b.ToTable("GuestLecturers");
                });

            modelBuilder.Entity("WebAPI.Models.Hotel", b =>
                {
                    b.Property<int>("IdRoom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRoom"));

                    b.Property<int?>("IdRegistration")
                        .HasColumnType("int");

                    b.Property<bool>("Reservation")
                        .HasColumnType("bit");

                    b.HasKey("IdRoom");

                    b.HasIndex("IdRegistration")
                        .IsUnique()
                        .HasFilter("[IdRegistration] IS NOT NULL");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("WebAPI.Models.Paper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Abstract")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("Decision")
                        .HasColumnType("int");

                    b.Property<byte[]>("FullPaper")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("IdRegistration")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdRegistration")
                        .IsUnique();

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("WebAPI.Models.ProgramCommittee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdConference")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdConference");

                    b.HasIndex("IdUser");

                    b.ToTable("ProgramCommittees");
                });

            modelBuilder.Entity("WebAPI.Models.Registration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("BillPayment")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("IdConference")
                        .HasColumnType("int");

                    b.Property<int>("IdPaper")
                        .HasColumnType("int");

                    b.Property<int?>("IdRoomReservation")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfRegistration")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdConference");

                    b.HasIndex("IdUser");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("WebAPI.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(500)");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("IdPaper")
                        .HasColumnType("int");

                    b.Property<int>("IdReviewer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdPaper");

                    b.HasIndex("IdReviewer");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("WebAPI.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdConference")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdConference")
                        .IsUnique();

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("WebAPI.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("IdChairperson")
                        .HasColumnType("int");

                    b.Property<int>("IdLecturer")
                        .HasColumnType("int");

                    b.Property<int>("IdPaper")
                        .HasColumnType("int");

                    b.Property<int>("IdSchedule")
                        .HasColumnType("int");

                    b.Property<TimeOnly>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("TimeStart")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("IdChairperson");

                    b.HasIndex("IdLecturer");

                    b.HasIndex("IdPaper")
                        .IsUnique();

                    b.HasIndex("IdSchedule");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("WebAPI.Models.UserConf", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)");

                    b.Property<string>("Oib")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(11)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserConfs");
                });

            modelBuilder.Entity("WebAPI.Models.GuestLecturer", b =>
                {
                    b.HasOne("WebAPI.Models.Conference", "Conference")
                        .WithMany("GuestLecturers")
                        .HasForeignKey("IdConference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserConf", "User")
                        .WithMany("GuestLecturers")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.Hotel", b =>
                {
                    b.HasOne("WebAPI.Models.Registration", "Registration")
                        .WithOne("Room")
                        .HasForeignKey("WebAPI.Models.Hotel", "IdRegistration");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("WebAPI.Models.Paper", b =>
                {
                    b.HasOne("WebAPI.Models.Registration", "Registration")
                        .WithOne("Paper")
                        .HasForeignKey("WebAPI.Models.Paper", "IdRegistration");

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("WebAPI.Models.ProgramCommittee", b =>
                {
                    b.HasOne("WebAPI.Models.Conference", "Conference")
                        .WithMany("ProgramCommittee")
                        .HasForeignKey("IdConference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserConf", "User")
                        .WithMany("ProgramCommittees")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.Registration", b =>
                {
                    b.HasOne("WebAPI.Models.Conference", "Conference")
                        .WithMany("Registrations")
                        .HasForeignKey("IdConference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.UserConf", "User")
                        .WithMany("Registrations")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebAPI.Models.Review", b =>
                {
                    b.HasOne("WebAPI.Models.Paper", "Paper")
                        .WithMany("Reviews")
                        .HasForeignKey("IdPaper")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.ProgramCommittee", "Reviewer")
                        .WithMany("Reviews")
                        .HasForeignKey("IdReviewer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WebAPI.Models.Schedule", b =>
                {
                    b.HasOne("WebAPI.Models.Conference", "Conference")
                        .WithOne("Schedule")
                        .HasForeignKey("WebAPI.Models.Schedule", "IdConference")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("WebAPI.Models.Session", b =>
                {
                    b.HasOne("WebAPI.Models.ProgramCommittee", "Chairperson")
                        .WithMany("Sessions")
                        .HasForeignKey("IdChairperson");

                    b.HasOne("WebAPI.Models.UserConf", "Lecturer")
                        .WithMany("Sessions")
                        .HasForeignKey("IdLecturer");

                    b.HasOne("WebAPI.Models.Paper", "Paper")
                        .WithOne("Session")
                        .HasForeignKey("WebAPI.Models.Session", "IdPaper")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Schedule", "Schedule")
                        .WithMany("Sessions")
                        .HasForeignKey("IdSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chairperson");

                    b.Navigation("Lecturer");

                    b.Navigation("Paper");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WebAPI.Models.Conference", b =>
                {
                    b.Navigation("GuestLecturers");

                    b.Navigation("ProgramCommittee");

                    b.Navigation("Registrations");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("WebAPI.Models.Paper", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebAPI.Models.ProgramCommittee", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.Models.Registration", b =>
                {
                    b.Navigation("Paper");

                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("WebAPI.Models.Schedule", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("WebAPI.Models.UserConf", b =>
                {
                    b.Navigation("GuestLecturers");

                    b.Navigation("ProgramCommittees");

                    b.Navigation("Registrations");

                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
